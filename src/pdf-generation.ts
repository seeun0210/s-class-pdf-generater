// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.8.1
//   protoc               v5.29.3
// source: src/proto/pdf-generation.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "pdf.generation";

/** src/proto/pdf-generation.proto */

export interface PdfGenerationRequest {
  sessionId: string;
  analysisType: string;
  templateName: string;
  analysisData: AnalysisData | undefined;
  options: PdfOptions | undefined;
}

export interface AnalysisData {
  creativeActivity: CreativeActivityData | undefined;
}

export interface CreativeActivityData {
  autonomousActivity: ActivityData | undefined;
  clubActivity: ActivityData | undefined;
  careerActivity: ActivityData | undefined;
  volunteerActivity: ActivityData | undefined;
  comprehensiveConclusion: ComprehensiveConclusion | undefined;
}

export interface ActivityData {
  summary: string;
  analysis: string;
  evaluation: string;
}

export interface ComprehensiveConclusion {
  conclusion: string;
}

export interface CrossValidation {
  strengths: string[];
  weaknesses: string[];
  recommendations: string[];
}

export interface PdfOptions {
  format: string;
  orientation: string;
  margins: { [key: string]: string };
}

export interface PdfOptions_MarginsEntry {
  key: string;
  value: string;
}

export interface PdfGenerationResponse {
  success: boolean;
  message: string;
  pdfData: Uint8Array;
  fileName: string;
}

export const PDF_GENERATION_PACKAGE_NAME = "pdf.generation";

export interface PdfGenerationServiceClient {
  generatePdf(request: PdfGenerationRequest): Observable<PdfGenerationResponse>;
}

export interface PdfGenerationServiceController {
  generatePdf(
    request: PdfGenerationRequest,
  ): Promise<PdfGenerationResponse> | Observable<PdfGenerationResponse> | PdfGenerationResponse;
}

export function PdfGenerationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["generatePdf"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PdfGenerationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PdfGenerationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PDF_GENERATION_SERVICE_NAME = "PdfGenerationService";
